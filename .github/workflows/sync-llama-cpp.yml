name: Sync llama.cpp

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  sync:
    runs-on: macos-15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for submodules and branch operations
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup JDK 17 for Android builds
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install dependencies
        run: npm ci

      - name: Run complete sync
        run: |
          chmod +x scripts/sync-llama-cpp-submodule.sh scripts/finalize-sync.sh
          ./scripts/sync-llama-cpp-submodule.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build iOS frameworks
        run: npm run build:ios-frameworks

      - name: Build Android libraries
        run: npm run build:android-libs

      - name: Build TypeScript library
        run: npm run build

      - name: Finalize sync
        run: ./scripts/finalize-sync.sh

      - name: Create Pull Request
        if: success()
        run: |
          # Get current llama.cpp commit and tag from sync branch
          CURRENT_COMMIT=$(git rev-parse HEAD:llama.cpp)
          cd llama.cpp
          git fetch --tags
          CURRENT_TAG=$(git describe --tags --exact-match "$CURRENT_COMMIT" 2>/dev/null || git describe --tags --abbrev=0 "$CURRENT_COMMIT" 2>/dev/null || echo "${CURRENT_COMMIT:0:7}")
          cd ..

          # Get previous llama.cpp commit and tag from main branch
          PREVIOUS_COMMIT=$(git rev-parse main:llama.cpp)
          cd llama.cpp
          PREVIOUS_TAG=$(git describe --tags --exact-match "$PREVIOUS_COMMIT" 2>/dev/null || git describe --tags --abbrev=0 "$PREVIOUS_COMMIT" 2>/dev/null || echo "${PREVIOUS_COMMIT:0:7}")
          cd ..

          # Generate llama.cpp changelog if versions differ
          LLAMA_CHANGELOG=""
          if [[ "$CURRENT_TAG" != "$PREVIOUS_TAG" && "$CURRENT_TAG" != "unknown" && "$PREVIOUS_TAG" != "unknown" ]]; then
            echo "üìù Generating llama.cpp changelog from $PREVIOUS_TAG to $CURRENT_TAG..."
            cd llama.cpp
            while IFS= read -r line; do
              COMMIT_HASH=$(echo "$line" | cut -d' ' -f1)
              COMMIT_MSG=$(echo "$line" | cut -d' ' -f2-)
              LLAMA_CHANGELOG+="- [\`${COMMIT_HASH:0:7}\`](https://github.com/ggml-org/llama.cpp/commit/$COMMIT_HASH) $COMMIT_MSG"$'\n'
            done < <(git log "${PREVIOUS_TAG}..${CURRENT_TAG}" --oneline --no-merges | head -20)
            cd ..

            if [[ -z "$LLAMA_CHANGELOG" ]]; then
              LLAMA_CHANGELOG="- No commits found between $PREVIOUS_TAG and $CURRENT_TAG"
            fi
          else
            LLAMA_CHANGELOG="- Version unchanged: $CURRENT_TAG"
          fi

          # Prepare PR body with llama.cpp changes
          PR_BODY="ü§ñ **Automated llama.cpp sync**

          This PR was automatically created/updated by the daily sync workflow.

          **Changes:**
          - Updated llama.cpp submodule from \`$PREVIOUS_TAG\` to \`$CURRENT_TAG\`
          - Regenerated bindings and build files

          **Verification:**
          - ‚úÖ Bootstrap script completed successfully (including iOS Metal compilation)
          - ‚úÖ iOS frameworks build completed successfully
          - ‚úÖ Android libraries build completed successfully
          - ‚úÖ TypeScript build completed successfully

          <details>
          <summary>üìã llama.cpp changes ($PREVIOUS_TAG ‚Üí $CURRENT_TAG)</summary>

          $LLAMA_CHANGELOG
          </details>

          Please review and merge if all checks pass."

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head auto/sync-llama.cpp --base main --json number --jq '.[0].number' || echo "")

          if [[ -n "$EXISTING_PR" && "$EXISTING_PR" != "null" ]]; then
            echo "‚úÖ PR #$EXISTING_PR already exists, updating it..."
            gh pr edit "$EXISTING_PR" --title "chore: sync llama.cpp to latest release" --body "$PR_BODY"
          else
            echo "üÜï Creating new PR..."
            gh pr create \
              --head auto/sync-llama.cpp \
              --base main \
              --title "chore: sync llama.cpp to latest release" \
              --body "$PR_BODY"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Sync failed. Check the workflow logs for details."
          echo "The persistent sync branch was not updated due to build failure."
